<div class="row">
  <div class="page-header">
    <h1>Technical Details</h1>
  </div>
  <div class="span12">
    <h3>Existing User Authentication Process</h3>
    <ol>
      <li>The user clicks "Login".</li>
      <li>If the addon is not unlocked then it will prompt for the master password. If it is unlocked it will skip this step.</li>
      <li>Foamicator fetches the authentication URL from the DOM.</li>
      <li>Foamicator retrieves the key pair for the domain from the database, decrypts them, and generates the client random value.</li>
      <li>Foamicator transmits the public key and the client random value to the server URL to begin the authentication process.</li>
      <li>The server retrieves theses values from the POST data and calls the get_challenge function in the Foamicatee library.</li>
      <li>Foamicatee creates the server random and the pre master secret.</li>
      <li>Foamicatee encrypts both of these values independently using the public key it was sent and returns them as JSON to the server code.</li>
      <li>The server stores the public key, the client random, and the server data generated by Foamicatee for the next request and then returns the JSON string to Foamicator.</li>
      <li>Foamicator decrypts these two values using the private key and then generates the master secret using the pre master secret, the server random, and the client random.</li>
      <li>Foamicator then creates the MD5 and SHA-1 hashes that are the challenge response, encrypts them using the private key and sends them to the server.</li>
      <li>The server retrieves the stored data, adds the two hashes from the POST data, and calls the authenticate function from the Foamicatee library.</li>
      <li>Foamicatee uses the public key to decrypt the hashes.</li>
      <li>Foamicatee calculates the master key and the answers to the challenge itself.</li>
      <li>These server generated hashes are compared to the two decrypted from the client and if they match the public key is authenticated.</li>
      <li>The server logs the user in using the public key or ends the authentication session.</li>
      <li>The server then returns JSON to Foamicator which redirects the addon to one of two URLs depending on whether the authentication was successful or failed.</li>
      <li>Foamicator then redirects to the received URL.</li>
    </ol>
    <h3>New User Authentication Process</h3>
    <ol>
      <li>Same as above up to number 15 except instead of retrieving the key pair a pair is generated, encrypted and stored in the database.</li>
      <li>If the authentication was successful, the server creates a new account, stores the key, and logs the user in as the new account.</li>
      <li>The server then returns JSON to Foamicator which redirects the addon to one of two URLs depending on whether the authentication was successful or failed.</li>
      <li>Foamicator then redirects to the received URL.</li>
    </ol>
    <h3>Key Storage</h3>
    <p>The first time a login attempt is made the addon prompts for a master password. This is hashed to create the encryption key for the key pairs. The encryption key is then
    hashed again and this second hash is stored in the database to verify the correct master password was entered. The encryption key is then kept in memory and used to encrypt
    the public and private keys before they are written into the database. It is also used upon retrieval to decrypt the keys for use in authentication. When the browser is closed
    the addon is unloaded from memory and the key is gone. After Firefox is relaunched the next attempt to login will prompt for the master password again. This is verified to match
    the stored hash in the database.</p>
    <h3>Security Considerations</h3>
    <h4>The Database</h4>
    <p>The database should be safe and unusable without the master password to regenerate the encryption key. All of the keys are kept encrypted. The domains and the association between
    key pairs and the domains are visible in plaintext. This is to facilitate much faster access because otherwise to find the correct key pair for a domain every single domain would
    need to be decrypted and checked in order to find the correct one.</p>
    <h4>The Addon</h4>
    <p>All of the Foamicator code is kept inside an annoymous function so that there is no publically accessible interface to the object. Listeners are setup to facillitate the functionality.
    The libraries used by Foamicator are however still part of the global namespace but this is a problem that will be addressed soon.</p>
    <h4>The Authentication Process</h4>
    <p>The only permanant information that leaves the browser is the public key. Message authentication codes are unnecessary because the md5 and sha-1 challenge hashes include the transmitted
    values in them so the client and server will calculate different values.</p>
    <h3>Technical Limitations</h3>
    <p>Right now there are a few major limitations with the Foamicate system. These include the following:</p>
    <ul>
      <li>The keys are much harder to move than passwords. This limitation should be very much mitigated with the planned import/export feature.</li>
      <li>The authentication process requires either browser support or plugin support. Mobile devices are an example. Unlike password managers, Foamicate cannot be a separate app from the browser.</li>
      <li>Loss of the private keys from something such as a hard drive crash. Other than backing up the keys to a device you have with you there aren't very many possible solutions.
      For most sites, it should be possible to implement some kind of email recovery but there's still the problem of accessing your email account.</li>
      <li>Forgetting your master password. This one is a very tough challenge since it must be very difficult to recover the keys without the correct password otherwise losing the database
      would be a very big disaster.</li>
    </ul>
  </div>
</div>
